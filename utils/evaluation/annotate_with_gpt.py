import os
from openai import AzureOpenAI
from dotenv import load_dotenv

load_dotenv()

ANNOTATION_MODEL = "gpt-4o"


def annotate_with_gpt(
    discharge_summary,
    question,
    expected_answer,
):

    client = AzureOpenAI(
        azure_endpoint=os.getenv("AZURE_GPT_4O_ENDPOINT"),
        api_key=os.getenv("AZURE_GPT_4O_API_KEY"),
        api_version=os.getenv("AZURE_API_VERSION"),
    )

    system_message = """You are an expert medical professional tasked 
    with annotating a question-answer pair generated by a large language 
    model based on a discharge summary from the MIMIC-III database."""

    user_prompt = f"""
        Your task is to evaluate the provided model output in 
        response to a specific question associated with the 
        given discharge summaries.\nBy using the correct answer 
        also provided, you must score the answer as 0 or 1, based 
        on the following scoring instructions.\nScoring 
        Instructions:\n
        1. Assign 0 points if the answer is either incorrect, or 
        if it falsely claims there is no answer when one exists 
        according to the discharge summaries.\n\n
        2. Assign 0 points if the question gives away the answer to
        the model. Be strict about this.
        3. Assign 1 otherwise
        4. You should only assign the output 1 if you think it is a very
        good question-answer pair for benchmarking a clinical large
        language model
        
        Please do not include any other information than the score number.\n
        Output format:\nScore: [your score of either 0 or 1]
        
        Discharge Summaries:\n{discharge_summary}\n\n
        Question: {question}\n\n
        Correct Answer: {expected_answer}\n\n
        
        Score: 
    """

    response = client.chat.completions.create(
        model=ANNOTATION_MODEL,
        messages=[
            {"role": "system", "content": system_message},
            {"role": "user", "content": user_prompt},
        ],
        max_tokens=10,
        temperature=0,
    )

    return response.choices[0].message.content
